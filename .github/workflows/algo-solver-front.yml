name: Build and Deploy (CI/CD)

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
    
jobs:
  build:
    name: Build-linux
    runs-on: ubuntu-latest
#   build1:
#     name: Build-Windows
#     runs-on: windows-latest
#   build2:
#     name: Build-Mac
#     runs-on: macos-latest
  
    strategy:
      matrix:
        node-version: [14.x]

    steps:
    - uses: actions/checkout@v2
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v1
      with:
        node-version: ${{ matrix.node-version }}

    - name: Restore node_modules from cache
      uses: actions/cache@v2
      with:
        path: |
          **/node_modules
        key: ${{ runner.os }}-${{ hashFiles('**/package-lock.json') }}

    - name: Install dependencies
      run: npm install

    #- name: Start 
    #-  run: npm start

    - name: Archive Production Artifact
      uses: actions/upload-artifact@s403o-patch-1
      with:
        name: build
        path: build

    - name: Run the tests and generate coverage report
      run: npm test -- --coverage

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v1
      with:
        token: ${{secrets.CODECOV_TOKEN}}
        vflags: unittest
        name: codecov-report

    #- name: Build 
    #  run: npm run build

    #- name: Test 
    #-  run: npm test

    #- name: Eject
      #id: npm eject
  deploy:
    name: Deploy
    needs: build
    runs-on: ubuntu-latest
    steps:
    - name: Checkout Repo
      uses: actions/checkout@s403o-patch-1

    - name: Download Artifact
      uses: actions/download-artifact@s403o-patch-1
      with:
        name: build
        path: build

    - name: Deploy to Firebase
      uses: w9jds/firebase-action@s403o-patch-1
      with:
        args: deploy --only hosting
      env:
        repoToken: '${{ secrets.GITHUB_TOKEN }}'
        FIREBASE_TOKEN: ${{ secrets.FIREBASE_SERVICE_ACCOUNT_ALGOSOLVER_FRONT }}
        projectId: algosolver-front